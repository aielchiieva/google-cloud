/*
 * Copyright Â© 2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package co.cask.gcp.datastore.sink;

import co.cask.cdap.api.annotation.Description;
import co.cask.cdap.api.annotation.Name;
import co.cask.cdap.api.annotation.Plugin;
import co.cask.cdap.api.data.batch.Output;
import co.cask.cdap.api.data.format.StructuredRecord;
import co.cask.cdap.api.data.schema.Schema;
import co.cask.cdap.api.data.schema.Schema.Field;
import co.cask.cdap.api.dataset.lib.KeyValue;
import co.cask.cdap.etl.api.Emitter;
import co.cask.cdap.etl.api.batch.BatchRuntimeContext;
import co.cask.cdap.etl.api.batch.BatchSink;
import co.cask.cdap.etl.api.batch.BatchSinkContext;
import co.cask.gcp.datastore.sink.util.SinkKeyType;
import co.cask.gcp.datastore.util.DatastorePropertyUtil;
import co.cask.hydrator.common.LineageRecorder;
import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Blob;
import com.google.cloud.datastore.BlobValue;
import com.google.cloud.datastore.BooleanValue;
import com.google.cloud.datastore.DoubleValue;
import com.google.cloud.datastore.EntityValue;
import com.google.cloud.datastore.FullEntity;
import com.google.cloud.datastore.IncompleteKey;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.LongValue;
import com.google.cloud.datastore.NullValue;
import com.google.cloud.datastore.PathElement;
import com.google.cloud.datastore.StringValue;
import com.google.cloud.datastore.TimestampValue;
import com.google.cloud.datastore.Value;
import com.google.common.base.Strings;
import org.apache.hadoop.io.NullWritable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * A {@link BatchSink} that writes data to Cloud Datastore.
 * This {@link DatastoreSink} takes a {@link StructuredRecord} in, converts it to Entity, and writes it to the
 * Cloud Datastore kind.
 */
@Plugin(type = BatchSink.PLUGIN_TYPE)
@Name(DatastoreSink.PLUGIN_NAME)
@Description("CDAP Google Cloud Datastore Batch Sink takes the structured record from the input source and writes "
  + "the data into Google Cloud Datastore.")
public class DatastoreSink extends BatchSink<StructuredRecord, NullWritable, FullEntity<?>> {

  private static final Logger LOG = LoggerFactory.getLogger(DatastoreSink.class);

  public static final String PLUGIN_NAME = "Datastore";

  private final DatastoreSinkConfig config;

  public DatastoreSink(DatastoreSinkConfig config) {
    this.config = config;
  }

  @SuppressWarnings("ConstantConditions")
  @Override
  public void prepareRun(BatchSinkContext context) {
    Schema inputSchema = context.getInputSchema();
    LOG.debug("DatastoreSink `prepareRun` input schema: {}", inputSchema);
    config.validate(inputSchema);

    context.addOutput(Output.of(config.getReferenceName(), new DatastoreOutputFormatProvider(config)));

    LineageRecorder lineageRecorder = new LineageRecorder(context, config.getReferenceName());
    lineageRecorder.createExternalDataset(inputSchema);
    // Record the field level WriteOperation
    lineageRecorder.recordWrite("Write", "Wrote to Datastore sink",
                                inputSchema.getFields().stream()
                                  .map(Schema.Field::getName)
                                  .collect(Collectors.toList()));
  }

  @Override
  public void initialize(BatchRuntimeContext context) throws Exception {
    super.initialize(context);
    config.validate(context.getInputSchema());
  }

  @Override
  public void transform(StructuredRecord input, Emitter<KeyValue<NullWritable, FullEntity<?>>> emitter) {
    KeyValue<NullWritable, FullEntity<?>> keyValue = getKeyValue(input);
    emitter.emit(keyValue);
  }

  private KeyValue<NullWritable, FullEntity<?>> getKeyValue(StructuredRecord record) {
    KeyFactory keyFactory = new KeyFactory(config.getProject())
      .setNamespace(config.getNamespace())
      .setKind(config.getKind());

    String keyAlias = config.getKeyAlias();
    FullEntity.Builder<IncompleteKey> entityBuilder = FullEntity.newBuilder();
    List<Field> fields = Objects.requireNonNull(record.getSchema().getFields(), "Schema fields cannot be empty");

    boolean useAutoGeneratedKey = config.isUseAutoGeneratedKey();
    for (Field field : fields) {
      String fieldName = field.getName();
      if (!useAutoGeneratedKey && keyAlias.equals(fieldName)) {
        entityBuilder.setKey(convertToKey(record, keyFactory, field));
      } else {
        boolean excludeFromIndex = isExcludedFromIndex(fieldName);
        entityBuilder.set(fieldName, convertToValue(fieldName, field.getSchema(), record, excludeFromIndex));
      }
    }

    if (useAutoGeneratedKey) {
      entityBuilder.setKey(getAutoGeneratedKey(keyFactory));
    }
    FullEntity<?> entity = entityBuilder.build();
    return new KeyValue<>(null, entity);
  }

  private boolean isExcludedFromIndex(String fieldName) {
    switch (config.getIndexStrategy()) {
      case ALL:
        return false;
      case NONE:
        return true;
      case CUSTOM:
        return !config.getIndexedProperties().contains(fieldName);
      default:
        throw new IllegalArgumentException(
          String.format("Unsupported index strategy [%s] for field: [%s]", config.getIndexStrategy(), fieldName));
    }
  }

  private IncompleteKey getAutoGeneratedKey(KeyFactory keyFactory) {
    List<PathElement> ancestors = config.getAncestor();
    if (!ancestors.isEmpty()) {
      keyFactory.addAncestors(ancestors);
    }
    return keyFactory.newKey();
  }

  @SuppressWarnings("ConstantConditions")
  private IncompleteKey convertToKey(StructuredRecord record, KeyFactory keyFactory, Field field) {
    Schema.Type schemaType = field.getSchema().getType();
    SinkKeyType keyType = config.getKeyType();
    switch (schemaType) {
      case STRING: {
        String strValue = record.get(field.getName());
        if (Strings.isNullOrEmpty(strValue)) {
          throw new IllegalArgumentException(
            String.format("Key value cannot be null or empty. Key field: [%s], Key type: [%s]", field.getName(),
                          keyType.getValue()));
        }
        switch (keyType) {
          case CUSTOM_NAME: {
            List<PathElement> ancestors = config.getAncestor();
            if (!ancestors.isEmpty()) {
              keyFactory.addAncestors(ancestors);
            }
            return keyFactory.newKey(strValue);
          }
          case KEY_LITERAL: {
            return transformKeyLiteralToKey(keyFactory, strValue);
          }
          case URL_SAFE_KEY:
            return transformToUrlSafeKey(field, keyType, strValue);
          default:
            throw new IllegalArgumentException(String.format("Key type [%s] is not supported for record type: [%s]",
                                                             keyType.getValue(), schemaType));
        }
      }
      case INT:
      case LONG: {
        switch (keyType) {
          case CUSTOM_NAME: {
            List<PathElement> ancestors = config.getAncestor();
            if (!ancestors.isEmpty()) {
              keyFactory.addAncestors(ancestors);
            }
            Number numValue = record.get(field.getName());
            return keyFactory.newKey(numValue.longValue());
          }
          default:
            throw new IllegalArgumentException(String.format("Key type [%s] is not supported for record type: [%s]",
                                                             keyType.getValue(), schemaType));
        }
      }
      default:
        String foundType = field.getSchema().isNullable()
          ? "nullable " + field.getSchema().getNonNullable().getType().name()
          : schemaType.name();
        throw new IllegalArgumentException(
          String.format("Key field [%s] record type [%s] is not supported by key type: [%s]",
                                                         field.getName(), foundType, keyType.getValue()));
    }
  }

  private IncompleteKey transformToUrlSafeKey(Field field, SinkKeyType keyType, String strValue) {
    Key key = Key.fromUrlSafe(strValue);
    if (!Objects.equals(config.getProject(), key.getProjectId())) {
      throw new IllegalArgumentException(
        String.format("%s projectId must be equal to defined projectId. Key field: [%s], " +
                        "Expected: [%s], Received: [%s]",
                      keyType.getValue(), field.getName(), config.getProject(), key.getProjectId()));
    } else if (!Objects.equals(config.getNamespace(), key.getNamespace())) {
      throw new IllegalArgumentException(
        String.format("%s namespace must be equal to defined namespace. Key field: [%s], " +
                        "Expected: [%s], Received: [%s]",
                      keyType.getValue(), field.getName(), config.getNamespace(), key.getNamespace()));
    } else if (!Objects.equals(config.getKind(), key.getKind())) {
      throw new IllegalArgumentException(
        String.format("%s kind must be equal to defined kind. Key field: [%s], " +
                        "Expected: [%s], Received: [%s]",
                      keyType.getValue(), field.getName(), config.getKind(), key.getKind()));
    }
    return key;
  }

  private Key transformKeyLiteralToKey(KeyFactory keyFactory, String keyLiteral) {
    List<PathElement> pathElements = DatastorePropertyUtil.parseKeyLiteral(keyLiteral);
    LOG.trace("KeyLiteral [{}] path elements: {}", keyLiteral, pathElements);
    if (pathElements.isEmpty()) {
      throw new IllegalArgumentException(String.format("Unexpected key format received: [%s]", keyLiteral));
    }

    PathElement keyElement = pathElements.get(pathElements.size() - 1);
    LOG.trace("Detected keyElement: [{}]", keyElement);
    if (!config.getKind().equals(keyElement.getKind())) {
      throw new IllegalArgumentException(
        String.format("Received key literal kind [%s] must match defined kind [%s]. Key literal: [%s]",
                      keyElement.getKind(), config.getKind(), keyLiteral));
    }

    List<PathElement> ancestors = pathElements.subList(0, pathElements.size() - 1);
    if (!ancestors.isEmpty()) {
      LOG.trace("Detected ancestors: {}", ancestors);
      keyFactory.addAncestors(ancestors);
    }

    if (keyElement.hasId()) {
      return keyFactory.newKey(keyElement.getId());
    }
    return keyFactory.newKey(keyElement.getName());
  }

  @SuppressWarnings("ConstantConditions")
  private Value<?> convertToValue(String fieldName, Schema fieldSchema, StructuredRecord record,
                                  boolean excludeFromIndex) {
    if (fieldSchema.isNullable() && record.get(fieldName) == null) {
      return NullValue.newBuilder()
        .setExcludeFromIndexes(excludeFromIndex)
        .build();
    }

    Value<?> outValue;
    switch (fieldSchema.getType()) {
      case STRING:
        outValue = StringValue.newBuilder(record.get(fieldName))
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
        break;
      case INT:
      case LONG:
        Schema.LogicalType logicalType = fieldSchema.getLogicalType();
        if (logicalType != null) {
          switch (logicalType) {
            case TIMESTAMP_MILLIS:
            case TIMESTAMP_MICROS:
              ZonedDateTime ts = record.getTimestamp(fieldName);
              Timestamp gcpTimestamp = Timestamp.ofTimeSecondsAndNanos(ts.toEpochSecond(), ts.getNano());
              outValue = TimestampValue.newBuilder(gcpTimestamp)
                .setExcludeFromIndexes(excludeFromIndex)
                .build();
              break;
            default:
              throw new IllegalArgumentException(String.format("Logical type [%s] is not supported", logicalType));
          }
        } else {
          Number value = record.get(fieldName);
          outValue = LongValue.newBuilder(value.longValue())
            .setExcludeFromIndexes(excludeFromIndex)
            .build();
        }
        break;
      case FLOAT:
      case DOUBLE:
        Number value = record.get(fieldName);
        outValue = DoubleValue.newBuilder(value.doubleValue())
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
        break;
      case BOOLEAN:
        outValue = BooleanValue.newBuilder(record.get(fieldName))
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
        break;
      case BYTES:
        byte[] byteArray = record.get(fieldName);
        outValue = BlobValue.newBuilder(Blob.copyFrom(byteArray))
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
        break;
      case RECORD:
        StructuredRecord nestedRecord = record.get(fieldName);
        FullEntity.Builder<IncompleteKey> nestedBuilder = FullEntity.newBuilder();
        Objects.requireNonNull(fieldSchema.getFields(), "Nested Schema fields cannot be empty").forEach(
          nestedField -> nestedBuilder.set(nestedField.getName(),
                                           convertToValue(nestedField.getName(), nestedField.getSchema(),
                                                          nestedRecord, excludeFromIndex)));
        outValue = EntityValue.newBuilder(nestedBuilder.build())
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
        break;
      case UNION:
        if (fieldSchema.isNullable()) {
          outValue = convertToValue(fieldName, fieldSchema.getNonNullable(), record, excludeFromIndex);
          break;
        }
        throw new IllegalArgumentException("Complex UNION type is not supported");
      default:
        throw new IllegalArgumentException(String.format("Record type [%s] is not supported",
                                                         fieldSchema.getType().name()));
    }
    return outValue;
  }
}
